---¿En que casos querrias usar un repositorio remoto para almacenar todo tu trabajo local?
1.- Compartir con otros usuarios mi trabajo local.
2.- Desarrollar de forma conjunta con otros usuarios un proyecto comun.
3.- Acceder desde distintas maquinas a mi trabajo.
4.- Utilizar un repositorio remoto como copia de seguridad.

+++Ordenes utilizadas para la creacion del repositorio remoto:
0.- Situarme en el path del repositorio local del que deseo obtener un repositorio remoto
1.- >git remote     :muestra todos los repositorios remotos referenciados en mi pc.
2.- >git remote add origin https://github.com/sergiogalanarmijo/reflections.git
añade un nuevo repositorio remoto identificado como origin cuya url es la mostrada.
3.- >git remote -v  :muestra info adicional (url) de todos los repositorios referenciados.
4.- >git push origin master :actualiza el branch master de mi repositorio local en el
repositorio remoto origin.

---¿Porque realizar las actualizaciones (pull) desde el directorio remoto al local de forma
manual en lugar de que git realizara una actualización automática?
1.- El directorio remoto puede contener cambios que no deseas incorporar a tu version actual local.

+++Ordenes utiles:
1.- >git config --global credential.helper wincred :almacena usuario y password para acceder a github
desde la linea de comandos.
2.- >git pull origin master :actualiza el branch master de mi repositorio local con el nuevo contenido
de repositorio remoto origin

*Prueba credential.helper

---Describe las diferencias entre Fork, Clone y Branch. ¿Cuando usarías uno en lugar de otro?
Un Branch es una ramificacion dentro de un repositorio Local.
1.- Version especial de mi repositorio.
2.- Experimento con mi codigo
3.- Prueba para solucionar un bug.
Clone es una operacion que copia un repositorio desde una ubicación, remota o local, a otra local.
Las operaciones de push modifican el repositorio original.
1.- Colaboracion en un proyecto donde tengo permisos para realizar modificaciones sobre el repositorio
original.
Fork es una operacion especifica de GITHUB que copia un repositorio de GITHUB sobre otra cuenta de usuario
de GITHUB. Deja constancia de quien es el creador del repositorio original. Las operaciones de push no
modifican el repositorio original sino la copia.
1.- Modificacion de un proyecto donde no tengo permisos para realizar modificaciones directamente sobre
el repositorio original.

---¿Cuales son los beneficios de tener una copia del ultimo estado conocido del remoto, almacenado en local?
Git mantiene una copia del ultimo estado conocido del repositorio remoto mediante la etiqueta de branch 
"origin/master", que marca el ultimo commit conocido del repositorio remoto desde la ULTIMA VEZ QUE HICE PUSH o PULL.
Esto permite tener la informacion necesaria para sicronizar el contenido de los repositorios remoto y local a la hora
de realizar un push o un pull, en las siguientes ocasiones:
1.- Hemos añadido commit en local y aun no hemos realizado un push al remoto.
2.- Hemos añadido commit en remoto y aun no hemos realizado un pull al local.
3.- Hemos añadido commit en local sin realizar push y hemos añadido commit en remoto sin realizar pull.

+++Ordenes utiles:
1.- >git fetch origin   :actualiza el branch local origin/master con los commit nuevos del repositorio remoto. 
Esto puede puede crear una rama que diverja de la rama principal local master. 
La orden >git status nos avisará de que existe una divergencia.
2.- >git pull origin master == >git fetch origin >git merge master origin/master 

---¿Como realizarias un desarrollo colaborativo sin usar Git y GitHUB? 
¿Que seria mas facil y que seria mas complicado?
Para realizar un desarrollo colaborativo sin GIT y GITHUB (sin otra herramienta de control de versiones)
seria necesario gestionar una estructura de ficheros que implementara el control de versiones y por otro
lado habria que establecer herramientas de comunicación y protocolos de modificacion de dicha estructura
de ficheros.

+++ GITHUB proporciona el mecanismo de las "pull request" para proponer cambios al resto de colaboradores.
Ejemplo:
1.- Creamos en nuestro repositorio local un branch con el cambio que queremos proponer.
2.- Realizamos un push del nuevo branch local al repositorio remoto comun.
3.- Realizamos una pull request de nuestro cambio propuesto asociado al nuevo branch.
4.- El resto de colaboradores pueden evaluar el cambio propuesto antes de ser incorporado al master en GITHUB.
5.- Una vez evaluado y aceptado se realiza el merge en el master del remoto de GITHUB.
6.- se realiza el pull actualizando en el repositorio local de todos los colaboradores. 
