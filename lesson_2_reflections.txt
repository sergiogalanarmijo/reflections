CREAR y GESTIONAR UN REPOSITORIO OFFLINE
---¿Que ocurre cuando inicias un repositorio?

Se crea un repositorio vacio es decir no contiene ningun commit.
Se crea un subdirectorio oculto (.git) que contiene la metainformacion
necesaria para la gestión del repositorio. Puedo ejecutar >ls -a para
ver el contenido oculto en un directorio.

+++Para crear (iniciar) un nuevo repositorio:
1.- Situarse en el directorio que contiene los ficheros que estarán en el nuevo
repositorio y ejecutar-> git init
Esta orden crea un nuevo repositorio sin ningun commit
2.- Si accedo al historial del nuevo repositorio ejecutando-> git log
Se produce un error indicando que no existe ningun commit
3.- Puedo comprobar que el repositorio ha sido creado ejecutando-> git status
Cuando un nuevo repositorio ha sido creado esta orden nos mostrará
los ficheros que aun no han sido commiteados ni han sido añadidos al
conjunto de ficheros que serán trackeados por el repositorio.

---¿Porque necesito iniciar un repositorio?
Mediante la orden >git init se inicia un repositorio nuevo, se crean
las estructuras necesarias para contener la metainformación de gestion
del repositorio.

---¿Que diferencia la "staging area" del directorio de trabajo y del repositorio?
La "staging area" forma parte de git y contiene un listado de los ficheros que estan
siendo seguidos (trackeados) en el repositorio. El directorio de trabajo puede contener
ficheros que no estan siendo trackeados en el repositorio. El repositorio contiene el
historial de cambios de los ficheros listados en la "staging area".

Puedo añadir un fichero al staging area mediante la orden >git add nombre_fichero y
comprobar su efecto mediante la orden >git status

+++Problemas detectados y solucionados al realizar el primer commit en el repositorio de
"reflections":
Una vez añadido mediante la orden >git add lesson_1_reflections.txt el fichero a la 
"staging area" intento realizar el primer commit mediante la orden >git commit.

1.-Me situo en el directorio del nuevo repositorio /c/version-control/reflections y lanzo 
la orden >git commit
2.- Obtengo lo siguiente:
$ git commit

*** Please tell me who you are.

Run

  git config --global user.email "you@example.com"
  git config --global user.name "Your Name"

to set your account's default identity.
Omit --global to set the identity only in this repository.

fatal: empty ident name (for <Sergio@Sergio-PC.(none)>) not allowed
3.-Tal y como se solicita en el mensaje anterior especifico mi identidad mediante
las ordenes siguientes:
>git config --global user.name "Sergio"
>git config --global user.email "sergiogalanarmijo@gmail.com"
4.-Lanzo de nuevo la orden >git commit y obtengo lo siguiente:
$ git commit
'C:/Program\ Files\ \(x86\)/Notepad++/notepad++.exe' -n -w: C:/Program\ Files\ \(x86\)/Notepad++/notepad++.exe: No such file or directory
error: There was a problem with the editor ''C:/Program\ Files\ \(x86\)/Notepad++/notepad++.exe' -n -w'.
Please supply the message using either -m or -F option.
5.- Observo que es un problema en el path del editor notepad++:
En la leccion 1 configure el espacio de trabajo de git de manera que->
    a)Asigné Notepad++ como editor por defecto de git mediante las ordenes siguientes:
    >git config --global core.editor "'C:/Program\ Files\ \(x86\)/Notepad++/notepad++.exe' -n -w"
    >git config --global push.default upstream
    >git config --global merge.conflictstyle diff3
    b)Git utiliza su editor por defecto para redactar el texto descriptivo del commit.
6.- SOLUCION: Relanzar las ordenes 5.a modificando el path de Notepad++ eliminando el caracter '\'.
    >git config --global core.editor "'C:/Program Files (x86)/Notepad++/notepad++.exe' -n"
    >git config --global push.default upstream
    >git config --global merge.conflictstyle diff3
7.- Lanzo la orden >git commit esta vez si se ejecuta Notepad++ como editor por defecto de Git
y puedo redactar el texto descriptivo del commit salvar y salir de Notepad++.
Nota: El texto descriptivo puede dar errores al introducir ':' o más de una linea.

+++Solucion al Problema: HEAD detached.
Este problema ocurre cuando, después de utilizar operaciones >git checkout para
volver a versiones anteriores a la mas reciente, dejamos desreferenciados commits.

Solucion:
0.- Utilizar la orden (>git checkout master) para eliminar el mensaje de "HEAD detached".
1.- Si utilizamos el commando >git log NO podemos acceder a los IDs de los commits
desreferenciados (perdidos). Para acceder a ellos utilizaremos la orden >git reflog.
2.- Ejecutar la siguiente orden utilizando los IDs del paso anterior del mas antiguo al
mas nuevo: >git cherry-pick ID ejemplo >git cherry-pick 88615db
3.- Podemos comprobar que todo esta correcto con >git status y >git log

---¿Como puedo usar la staging area para facilitar la creacion de un commit por cambio logico?
Antes de realizar un commit puedo haber realizado mas de "un cambio logico". Cuando dichos 
cambios logicos estan separados en distintos ficheros fisicos, puedo utilizar
el staging area para agrupar las modificaciones pertenecientes a un solo cambio logico y realizar
un commit.

+++Ordenes utiles:
1.- >git diff           :compara el working directory con el staging area
2.- >git diff --staged  :compara el staging area con el último commit en el repositorio.
3.- >git reset --hard   :elimina cualquier cambio en el working directory y en la staging area.
4.- >git add <filename> :añade los cambios realizados en el fichero <filename> al staging area.
5.- >git commit         :crea un nuevo commit con el contenido de las modificaciones del staging area.
6.- >git status         :muestra el estado de los ficheros del working directorio en relacion a la staging area.

---¿En que situaciones los branches son utiles para mantener ordenado el historial de commits?
1.-Queremos probar un cambio experimental en el software.
2.-Queremos desarrollar una version especial del software.
En ambas situaciones podemos utilizar los branches (ramificaciones) del historial de commits para mantener
ordenado nuestro historial y poder acceder a las nuevas versiones o retomar el desarrollo original.

+++Ordenes utiles branches:
1.- >git branch                 :muestra los branches existentes y nos indica el branch actual.
2.- >git branch <namebranch>    :crea un nuevo branch y lo etiqueta con <namebranch>
3.- >git checkout <namebranch>  :establece el branch etiquetado con <namebranch> como branch actual.

+++Observacion en el comando >git log :Error de compatibilidad entre scroll.
Cuando utilicemos el comando >git log usar siempre las flechas de teclado para
realizar scroll, si combinamos las flechas de teclado y la rueda de raton para
realizar scroll se producen errores de repeticion de texto (commits) que nos pueden
llevar a confusion.

---¿Como te ayudan los diagramas a visualizar la estructura de ramificaciones (branch)?
El repositorio (historial de commits) tiene una estructura de grafo dirigido, donde:
1.- Cada nodo representa un commit.
2.- El nodo raiz es el primer commit del proyecto.
3.- Un branch es una sucesion de nodos conectados mediante arcos dirigidos.
4.- Cada vez que realizamos un commit se crea un arco dirigido desde el nuevo commit
hasta el commit "marcado como actual" y despues se marca el nuevo commit como actual.
5.- El comando >git checkout ID "marca como actual" el commit (nodo) identificado con ID.
6.- El comando >git log lista el conjunto de commits (nodos) desde el nodo marcado como
actual hasta el commit inicial (nodo origen) siguiendo la direccion de los arcos dirigidos.
7.- En todos los repositorios creados en git existe un branch (rama) principal etiquetada como master.
8.- El branch master representa el desarrollo principal del proyecto.
9.- Una branch es identificado mediante una etiqueta. Esta etiqueta identifica al commit
mas reciente dentro de la branch.
10.- La orden >git checkout master "marca como commit actual" al commit mas reciente en la branch
principal.

+++Ordenes utilies:
1.- >git log --graph --oneline <branchname1> <branchname2> : muestra en forma de grafo textual
la estructura de ramificaciones del repositorio incluyendo solo las ramas branchname1 y branchname2.
2.- >git checkout -b <branchname> :equivale a lanzar la siguiente secuencia de ordenes:
    >git branch <branchname>
    >git checkout <branchname>

---¿Cual es el resultado de mezclar dos branch?
Un nuevo commit con las modificaciones de ambos branch cuyos padres son las cabezas de ambos branch.
Para mezclar dos branch git sigue la siguiente estrategia:
0.- Primero he de situarme en el branch que quiero que contenga el merge mediante >git checkout <branchname>
1.- Considera el commit mas reciente comun a ambos branch.
2.- Teniendo en cuenta las lineas añadidas y eliminadas en ambos branch respecto al commit comun mas reciente
    a) mantiene las lineas que no han sido ni añadidas ni eliminadas
    b) añade las lineas que han sido añadidas en cualquiera de los dos branch
    c) elimina las lineas que han sido eliminadas en cualquiera de los dos branch
Una vez realizada la mezcla (merge) de dos branch:
1.-La orden >git log muestra los commit de ambos branch intercalados y ordenados segun su fecha de creacion.
2.-La orden >git diff id1 id2 muestra las diferencias de los commit id1 e id2 incluyendo los cambios de ambos
branch, si queremos obtener las diferencias de un commit con su padre tendremos que utilizar la orden
>git show id

+++Ordenes utiles:
1.- >git merge master coins :realiza un merge de los branch master y coins, actualiza la cabeza del branch, en
el que estemos situados actualmente, al commit que se crea al realizar el merge.
2.- >git branch -d coins    :elimina la etiqueta del branch coins
3.- >git show ID            :realiza la operacion diff entre el commit identificado por ID y su padre.

---